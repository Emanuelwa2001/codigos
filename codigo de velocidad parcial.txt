"""
Driver para el m√≥dulo NRF24L01+ en MicroPython.
"""

from micropython import const
import utime

# --- Direcciones de registros NRF24L01 ---
CONFIG       = const(0x00)
EN_RXADDR    = const(0x02)
SETUP_AW     = const(0x03)
SETUP_RETR   = const(0x04)
RF_CH        = const(0x05)
RF_SETUP     = const(0x06)
STATUS       = const(0x07)
RX_ADDR_P0   = const(0x0A)
TX_ADDR      = const(0x10)
RX_PW_P0     = const(0x11)
FIFO_STATUS  = const(0x17)
DYNPD        = const(0x1C)

# --- Bits del registro CONFIG ---
EN_CRC  = const(0x08)
CRCO    = const(0x04)
PWR_UP  = const(0x02)
PRIM_RX = const(0x01)

# --- Potencia y velocidad ---
POWER_0   = const(0x00)  # -18 dBm
POWER_1   = const(0x02)  # -12 dBm
POWER_2   = const(0x04)  # -6 dBm
POWER_3   = const(0x06)  # 0 dBm
SPEED_1M  = const(0x00)
SPEED_2M  = const(0x08)
SPEED_250K = const(0x20)

# --- Bits del registro STATUS ---
RX_DR  = const(0x40)
TX_DS  = const(0x20)
MAX_RT = const(0x10)

# --- FIFO_STATUS ---
RX_EMPTY = const(0x01)

# --- Comandos SPI ---
R_RX_PL_WID   = const(0x60)
R_RX_PAYLOAD  = const(0x61)
W_TX_PAYLOAD  = const(0xA0)
FLUSH_TX      = const(0xE1)
FLUSH_RX      = const(0xE2)
NOP           = const(0xFF)


class NRF24L01:
    def __init__(self, spi, cs, ce, channel=68, payload_size=16):
        assert payload_size <= 32

        self.spi = spi
        self.cs = cs
        self.ce = ce
        self.payload_size = payload_size
        self.pipe0_read_addr = None
        self.buf = bytearray(1)

        self.init_spi(baudrate=4000000)

        ce.init(ce.OUT, value=0)
        cs.init(cs.OUT, value=1)

        utime.sleep_ms(5)

        # Verificar presencia del dispositivo
        self.reg_write(SETUP_AW, 0b11)
        if self.reg_read(SETUP_AW) != 0b11:
            raise OSError("nRF24L01+ no responde")

        self.reg_write(DYNPD, 0)
        self.reg_write(SETUP_RETR, (6 << 4) | 8)  # delay 1750us, 8 reintentos
        self.set_power_speed(POWER_3, SPEED_2M)
        self.set_crc(2)
        self.reg_write(STATUS, RX_DR | TX_DS | MAX_RT)
        self.set_channel(channel)
        self.flush_rx()
        self.flush_tx()

    def init_spi(self, baudrate):
        try:
            master = self.spi.MASTER
        except AttributeError:
            self.spi.init(baudrate=baudrate, polarity=0, phase=0)
        else:
            self.spi.init(master, baudrate=baudrate, polarity=0, phase=0)

    def reg_read(self, reg):
        self.cs(0)
        self.spi.readinto(self.buf, reg)
        self.spi.readinto(self.buf)
        self.cs(1)
        return self.buf[0]

    def reg_write_bytes(self, reg, buf):
        self.cs(0)
        self.spi.readinto(self.buf, 0x20 | reg)
        self.spi.write(buf)
        self.cs(1)
        return self.buf[0]

    def reg_write(self, reg, value):
        self.cs(0)
        self.spi.readinto(self.buf, 0x20 | reg)
        ret = self.buf[0]
        self.spi.readinto(self.buf, value)
        self.cs(1)
        return ret

    def flush_rx(self):
        self.cs(0)
        self.spi.readinto(self.buf, FLUSH_RX)
        self.cs(1)

    def flush_tx(self):
        self.cs(0)
        self.spi.readinto(self.buf, FLUSH_TX)
        self.cs(1)

    def set_power_speed(self, power, speed):
        setup = self.reg_read(RF_SETUP) & 0b11010001
        self.reg_write(RF_SETUP, setup | power | speed)

    def set_crc(self, length):
        config = self.reg_read(CONFIG) & ~(CRCO | EN_CRC)
        if length == 1:
            config |= EN_CRC
        elif length == 2:
            config |= EN_CRC | CRCO
        self.reg_write(CONFIG, config)

    def set_channel(self, channel):
        self.reg_write(RF_CH, min(channel, 125))

    def open_tx_pipe(self, address):
        assert len(address) == 5
        self.reg